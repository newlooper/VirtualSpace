<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="logTab.Menu.Clear" xml:space="preserve">
    <value>Clear</value>
  </data>
  <data name="logTabDebug" xml:space="preserve">
    <value>Debug</value>
  </data>
  <data name="logTabError" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="NavBar.Rules" xml:space="preserve">
    <value>Rules</value>
  </data>
  <data name="logTabInfo" xml:space="preserve">
    <value>Info</value>
  </data>
  <data name="logTabWarning" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="NavBar.General" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="NavBar.Logs" xml:space="preserve">
    <value>Logs</value>
  </data>
  <data name="NavBar.UI" xml:space="preserve">
    <value>UI</value>
  </data>
  <data name="NavBar.Theme" xml:space="preserve">
    <value>Theme</value>
  </data>
  <data name="NavBar.Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="NavBar.Plugins" xml:space="preserve">
    <value>Plugins</value>
  </data>
  <data name="NavBar.Help" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="Page.Settings.Language" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="logTabVerbose" xml:space="preserve">
    <value>Verbose</value>
  </data>
  <data name="logTabEvent" xml:space="preserve">
    <value>Event</value>
  </data>
  <data name="Page.Settings.Theme.Sys" xml:space="preserve">
    <value>System Settings</value>
  </data>
  <data name="Page.Settings.Theme" xml:space="preserve">
    <value>Theme</value>
  </data>
  <data name="Page.Settings.Theme.Light" xml:space="preserve">
    <value>Light</value>
  </data>
  <data name="Page.Settings.Theme.Dark" xml:space="preserve">
    <value>Dark</value>
  </data>
  <data name="Menus.Commons.Theme.Change" xml:space="preserve">
    <value>Switch Theme</value>
  </data>
  <data name="Page.Logs.IsPrintLogs" xml:space="preserve">
    <value>Show Logs In GUI</value>
  </data>
  <data name="Menus.Logs.OpenLogsDir" xml:space="preserve">
    <value>Open Logs Folder...</value>
  </data>
  <data name="Menus.Logs.ClearAll" xml:space="preserve">
    <value>Clear all logs</value>
  </data>
  <data name="Menus.Commons.Close" xml:space="preserve">
    <value>Close this window</value>
  </data>
  <data name="Menus.Commons.Restart" xml:space="preserve">
    <value>Restart</value>
  </data>
  <data name="Menus.Commons.Shutdown" xml:space="preserve">
    <value>Shutdown Application</value>
  </data>
  <data name="Page.Plugins.Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Page.Plugins.Version" xml:space="preserve">
    <value>Version</value>
  </data>
  <data name="Page.Plugins.Author" xml:space="preserve">
    <value>Author</value>
  </data>
  <data name="Page.Plugins.Email" xml:space="preserve">
    <value>Emai</value>
  </data>
  <data name="Page.Plugins.Operations" xml:space="preserve">
    <value>Operations</value>
  </data>
  <data name="Page.Plugins.Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="Page.Plugins.Restart" xml:space="preserve">
    <value>Restart</value>
  </data>
  <data name="Page.Plugins.Close" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="Page.Rules.Updated" xml:space="preserve">
    <value>Updated</value>
  </data>
  <data name="Page.Rules.Created" xml:space="preserve">
    <value>Created</value>
  </data>
  <data name="Page.Rules.Add" xml:space="preserve">
    <value>New...</value>
  </data>
  <data name="Page.Rules.Edit" xml:space="preserve">
    <value>Edit(E)...</value>
  </data>
  <data name="Page.Rules.Clone" xml:space="preserve">
    <value>Clone</value>
  </data>
  <data name="Page.Rules.Delete" xml:space="preserve">
    <value>Remove(Del)</value>
  </data>
  <data name="Page.Rules.NewRule" xml:space="preserve">
    <value>New Rule Definition</value>
  </data>
  <data name="Page.Rules.EditRule" xml:space="preserve">
    <value>Edit Rule Definition</value>
  </data>
  <data name="Page.Rules.Rule.Enabled" xml:space="preserve">
    <value>Enabled</value>
  </data>
  <data name="Page.Rules.Rule.Basic" xml:space="preserve">
    <value>Basics</value>
  </data>
  <data name="Generic.Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Validation.Error.Required" xml:space="preserve">
    <value>Field is required.</value>
  </data>
  <data name="Page.Rules.Rule.Created" xml:space="preserve">
    <value>Created</value>
  </data>
  <data name="Page.Rules.Rule.Updated" xml:space="preserve">
    <value>Updated</value>
  </data>
  <data name="Page.Rules.Rule.WindowRules" xml:space="preserve">
    <value>Common Window Rules</value>
  </data>
  <data name="Page.Rules.Rule.Title" xml:space="preserve">
    <value>Window Title</value>
  </data>
  <data name="Page.Rules.Rule.ProcessName" xml:space="preserve">
    <value>Process Name</value>
  </data>
  <data name="Page.Rules.Rule.ProcessPath" xml:space="preserve">
    <value>Process Path</value>
  </data>
  <data name="Page.Rules.Rule.WndClass" xml:space="preserve">
    <value>Window Class</value>
  </data>
  <data name="Page.Rules.Rule.WinInScreen" xml:space="preserve">
    <value>Window In Screen</value>
  </data>
  <data name="Page.Rules.Rule.CloseDefBox" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Page.Rules.Rule.Save" xml:space="preserve">
    <value>Save and Close</value>
  </data>
  <data name="Page.Rules.Rule.CommandLine" xml:space="preserve">
    <value>Command Line</value>
  </data>
  <data name="Page.Rules.Rule.WindowActions" xml:space="preserve">
    <value>Window Actions</value>
  </data>
  <data name="Page.Rules.Rule.MoveToDesktop" xml:space="preserve">
    <value>Move To Desktop</value>
  </data>
  <data name="Page.Rules.Rule.FollowWindow" xml:space="preserve">
    <value>Follow Window</value>
  </data>
  <data name="Page.Rules.Rule.PinWindow" xml:space="preserve">
    <value>Pin Application of Window</value>
  </data>
  <data name="Page.Rules.Rule.PinApp" xml:space="preserve">
    <value>Pin Window</value>
  </data>
  <data name="Page.Rules.Rule.HideFromView" xml:space="preserve">
    <value>Hide From View</value>
  </data>
  <data name="Page.Rules.Rule.MoveToScreen" xml:space="preserve">
    <value>Move To Screen</value>
  </data>
  <data name="Page.UI.VdArrangement" xml:space="preserve">
    <value>Virtual Desktop Arrangement</value>
  </data>
  <data name="Page.UI.VdView" xml:space="preserve">
    <value>Virtual Desktop View</value>
  </data>
  <data name="Page.UI.ShowVdName" xml:space="preserve">
    <value>Show Virtual Desktop Name</value>
  </data>
  <data name="Page.UI.ShowVdIndex" xml:space="preserve">
    <value>Show Virtual Desktop Index</value>
  </data>
  <data name="Page.UI.ShowVdIndex.ZeroBased" xml:space="preserve">
    <value>0-based</value>
  </data>
  <data name="Page.UI.ShowVdIndex.OneBased" xml:space="preserve">
    <value>1-based</value>
  </data>
  <data name="Note.DesktopArrangement" xml:space="preserve">
    <value>Note: If and only when the number of virtual desktops is the square of the natural number [1,n], the arrangement can be changed; 
if the conditions are not satisfied, the program will automatically reset to the first arrangement.</value>
  </data>
  <data name="Page.UI.Label.m0" xml:space="preserve">
    <value>TopLeft to BottomRight, Horizontal</value>
  </data>
  <data name="Page.UI.Label.m1" xml:space="preserve">
    <value>TopRight to BottomLeft, Horizontal</value>
  </data>
  <data name="Page.UI.Label.m2" xml:space="preserve">
    <value>BottomLeft to TopRight, Horizontal</value>
  </data>
  <data name="Page.UI.Label.m3" xml:space="preserve">
    <value>BottomRight to TopLeft, Horizontal</value>
  </data>
  <data name="Page.UI.Label.m4" xml:space="preserve">
    <value>TopLeft to BottomRight, Vertical</value>
  </data>
  <data name="Page.UI.Label.m5" xml:space="preserve">
    <value>TopRight to BottomLeft, Vertical</value>
  </data>
  <data name="Page.UI.Label.m6" xml:space="preserve">
    <value>BottomLeft to TopRight, Vertical</value>
  </data>
  <data name="Page.UI.Label.m7" xml:space="preserve">
    <value>BottomRight to TopLeft, Vertical</value>
  </data>
  <data name="NavBar.Control" xml:space="preserve">
    <value>Control</value>
  </data>
  <data name="Page.Control.Keyboard" xml:space="preserve">
    <value>Keyboard</value>
  </data>
  <data name="Page.Control.Mouse" xml:space="preserve">
    <value>Mouse</value>
  </data>
  <data name="Page.Control.KB.RegSave" xml:space="preserve">
    <value>Register and Save</value>
  </data>
  <data name="Page.Control.KB.Extra" xml:space="preserve">
    <value>Alternate</value>
  </data>
  <data name="Page.Control.KB.ClearSave" xml:space="preserve">
    <value>Clear and Save</value>
  </data>
  <data name="Page.Rules.Tag" xml:space="preserve">
    <value>Tag(Group)</value>
  </data>
  <data name="Generic.Filter" xml:space="preserve">
    <value>Filter</value>
  </data>
  <data name="Page.Control.MouseAction.Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Page.Control.MouseAction.Clear" xml:space="preserve">
    <value>Clear</value>
  </data>
  <data name="Page.Control.MouseButtons.Left" xml:space="preserve">
    <value>Left</value>
  </data>
  <data name="Page.Control.MouseButtons.Middle" xml:space="preserve">
    <value>Middle</value>
  </data>
  <data name="Page.Control.MouseButtons.Right" xml:space="preserve">
    <value>Right</value>
  </data>
  <data name="Page.Rules.Rule.Op.=" xml:space="preserve">
    <value>is</value>
  </data>
  <data name="Page.Rules.Rule.Op.ssw" xml:space="preserve">
    <value>starts with</value>
  </data>
  <data name="Page.Rules.Rule.Op.esw" xml:space="preserve">
    <value>ends with</value>
  </data>
  <data name="Page.Rules.Rule.Op.sc" xml:space="preserve">
    <value>contains</value>
  </data>
  <data name="Page.Rules.Rule.Op.rim" xml:space="preserve">
    <value>regex</value>
  </data>
  <data name="Page.Control.MouseAction.OnDesktop" xml:space="preserve">
    <value>Click on a virtual desktop in the MainView</value>
  </data>
  <data name="Page.Control.MouseAction.OnThumb" xml:space="preserve">
    <value>Click on a window thumbnail in the MainView</value>
  </data>
  <data name="Page.Control.MouseAction.Behavior" xml:space="preserve">
    <value>🖇️</value>
  </data>
  <data name="Mouse.Action.WindowHideFromView" xml:space="preserve">
    <value>Hide From View</value>
  </data>
  <data name="Mouse.Action.DoNothing" xml:space="preserve">
    <value>Do Nothing</value>
  </data>
  <data name="Mouse.Action.DesktopVisibleAndCloseView" xml:space="preserve">
    <value>Switch Desktop And Close View</value>
  </data>
  <data name="Mouse.Action.DesktopVisibleOnly" xml:space="preserve">
    <value>Switch Desktop Only</value>
  </data>
  <data name="Mouse.Action.ContextMenu" xml:space="preserve">
    <value>Show Context Menu</value>
  </data>
  <data name="Mouse.Action.WindowActiveDesktopVisibleAndCloseView" xml:space="preserve">
    <value>Active Window, Switch Virtual Desktop And Close View</value>
  </data>
  <data name="Mouse.Action.WindowActiveDesktopVisibleOnly" xml:space="preserve">
    <value>Active Window, Switch Virtual Desktop Only</value>
  </data>
  <data name="Mouse.Action.WindowClose" xml:space="preserve">
    <value>Close Window</value>
  </data>
  <data name="Mouse.Action.WindowShowForSelectedProcessOnly" xml:space="preserve">
    <value>Show Windows Only From Selected App</value>
  </data>
  <data name="Mouse.Action.WindowShowForSelectedProcessInSelectedDesktop" xml:space="preserve">
    <value>Show Windows Only From Selected App in Selected Desktop</value>
  </data>
  <data name="Mouse.Action.DesktopShowForSelectedDesktop" xml:space="preserve">
    <value>Show Only Selected Desktop in MainView</value>
  </data>
  <data name="Page.Control.Mouse.UseWheelSwitchDesktopWhenOnTaskbar" xml:space="preserve">
    <value>When mouse hover on Taskbar, Use wheel switch virtual desktop.</value>
  </data>
  <data name="Page.Control.Mouse.Wheel.Up" xml:space="preserve">
    <value>Scroll Up =&gt; Go Left</value>
  </data>
  <data name="Page.Control.Mouse.Wheel.SUp" xml:space="preserve">
    <value>Scroll Down =&gt; Go Right</value>
  </data>
  <data name="Page.Control.Mouse.Wheel.Down" xml:space="preserve">
    <value>SHIFT+Scroll Up =&gt; Go Up</value>
  </data>
  <data name="Page.Control.Mouse.Wheel.SDown" xml:space="preserve">
    <value>SHIFT+Scroll Down =&gt; Go Down</value>
  </data>
  <data name="Page.Control.MouseAction.Bind" xml:space="preserve">
    <value>Bind</value>
  </data>
  <data name="Page.Settings.Storage.ConfigRootPath" xml:space="preserve">
    <value>Parent Folder of Configs</value>
  </data>
  <data name="Page.Settings.Storage" xml:space="preserve">
    <value>Storage</value>
  </data>
  <data name="Note.Settings.Storage" xml:space="preserve">
    <value>Note: change config folder need restart program. this operation only change location, no files will be copied or moved to avoid overwrite files unexpectedly. 
if you want reuse current configs, you may manually copy "Related Content" to the folder you choosed, then restart program.
Related Content: Settings.json, Profiles\*.*</value>
  </data>
  <data name="Page.Settings.Storage.ChangeConfigPath" xml:space="preserve">
    <value>Change...</value>
  </data>
  <data name="Page.Settings.ProfileManager" xml:space="preserve">
    <value>Profiles</value>
  </data>
  <data name="Page.Settings.Menus.Duplicate" xml:space="preserve">
    <value>Duplicate</value>
  </data>
  <data name="Page.Settings.Menus.Rename" xml:space="preserve">
    <value>Rename</value>
  </data>
  <data name="Page.Settings.Menus.Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Dialogs.OK" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="Dialogs.Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Page.General.Basics" xml:space="preserve">
    <value>Basics</value>
  </data>
  <data name="Page.General.Navigation" xml:space="preserve">
    <value>Navigation</value>
  </data>
  <data name="Page.General.Nav.HType" xml:space="preserve">
    <value>Right end of row joins to left end of:</value>
  </data>
  <data name="Page.General.Cluster" xml:space="preserve">
    <value>Cluster</value>
  </data>
  <data name="Page.General.TaskScheduler" xml:space="preserve">
    <value>Task Scheduler</value>
  </data>
  <data name="Note.General.Label.TaskScheduler" xml:space="preserve">
    <value>Note: more details such as delay of start can be set in</value>
  </data>
  <data name="Page.General.RunOnStartup" xml:space="preserve">
    <value>Launch program at system startup.</value>
  </data>
  <data name="Page.General.Nav.H" xml:space="preserve">
    <value>Enable circulation.</value>
  </data>
  <data name="Page.General.Nav.V" xml:space="preserve">
    <value>Circulate vertically. (same col only)</value>
  </data>
  <data name="Page.General.HideMainViewIfItsShown" xml:space="preserve">
    <value>When use hotkey rise the MainView, Close it if the MainView already shown.</value>
  </data>
  <data name="Page.General.NotificationOnVdChanged" xml:space="preserve">
    <value>Show notification when Current virtual desktop changed.</value>
  </data>
  <data name="Page.General.ShowVDIndexOnTrayIcon" xml:space="preserve">
    <value>Show virtual desktop index on Tray Icon.</value>
  </data>
  <data name="Page.General.HideOnStart" xml:space="preserve">
    <value>Hide MainView when program start.</value>
  </data>
  <data name="Page.General.StyleOfVDIndexOnTrayIcon.0" xml:space="preserve">
    <value>Default</value>
  </data>
  <data name="Page.General.StyleOfVDIndexOnTrayIcon.1" xml:space="preserve">
    <value>High Contrast 1</value>
  </data>
  <data name="Page.General.StyleOfVDIndexOnTrayIcon.2" xml:space="preserve">
    <value>High Contrast 2</value>
  </data>
  <data name="Note.Settings.Profiles" xml:space="preserve">
    <value>Note: KeyBindings, MouseActions, LogConfigs and StorageConfigs are shared by all profiles(regardless of profiles). 
some settings may need restart program to take effect.</value>
  </data>
  <data name="Page.General.Nav.HType.1" xml:space="preserve">
    <value>Same row</value>
  </data>
  <data name="Page.General.Nav.HType.0" xml:space="preserve">
    <value>Next row</value>
  </data>
  <data name="Menus.Commons.RunAsAdmin" xml:space="preserve">
    <value>Run As Administrator</value>
  </data>
  <data name="Page.Control.MouseAction.WindowBindings" xml:space="preserve">
    <value>First select the MouseAction from the left side of the 🖇️ icon, then choose a behavior from the right side of the 🖇️ icon, and finally bind.</value>
  </data>
  <data name="Page.Control.MouseAction.DesktopBindings" xml:space="preserve">
    <value>First select the MouseAction from the left side of the 🖇️ icon, then choose a behavior from the right side of the 🖇️ icon, and finally bind.</value>
  </data>
  <data name="Page.Control.MouseAction.ExpanderHeader" xml:space="preserve">
    <value>Expand for details.</value>
  </data>
</root>